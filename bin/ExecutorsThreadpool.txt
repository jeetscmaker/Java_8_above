newFixedThreadPool():-
    Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
    At any point, at most nThreads threads will be active processing tasks. If additional tasks are
    submitted when all threads are active, they will wait in the queue until a thread is available.
    If any thread terminates due to a failure during execution prior to shutdown, a new one will take
    its place if needed to execute subsequent tasks. The threads in the pool will exist until it is
    explicitly shutdown.

newCachedThreadPool():-
    Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads
    when they are available. These pools will typically improve the performance of programs that execute
    many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available.
    If no existing thread is available, a new thread will be created and added to the pool. Threads that have
    not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains
    idle for long enough will not consume any resources. Note that pools with similar properties but
    different details (for example, timeout parameters) may be created using ThreadPoolExecutor constructors.
    In terms of resources, the newFixedThreadPool will keep all the threads running until they are
    explicitly terminated. In the newCachedThreadPool Threads that have not been used for sixty seconds
    are terminated and removed from the cache.
    Given this, the resource consumption will depend very much in the situation.
    For instance, If you have a huge number of long running tasks I would suggest the FixedThreadPool.
    As for the CachedThreadPool, the docs say that "These pools will typically improve the performance
    of programs that execute many short-lived asynchronous tasks".

Effective Java, 2nd Edition, by Joshua Bloch, chapter 10, Item 68 :
    "Choosing the executor service for a particular application can be tricky. If you’re writing a
    small program, or a lightly loaded server, using Executors.new- CachedThreadPool is generally a
    good choice, as it demands no configuration and generally “does the right thing.” But a cached
    thread pool is not a good choice for a heavily loaded production server!
    In a cached thread pool, submitted tasks are not queued but immediately handed off to a thread
    for execution. If no threads are available, a new one is created. If a server is so heavily loaded
    that all of its CPUs are fully utilized, and more tasks arrive, more threads will be created,
    which will only make matters worse.
    Therefore, in a heavily loaded production server, you are much better off using
    Executors.newFixedThreadPool, which gives you a pool with a fixed number of threads,
    or using the ThreadPoolExecutor class directly, for maximum control."
